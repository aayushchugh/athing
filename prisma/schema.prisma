generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id @unique @default(uuid())
  username      String    @unique
  password      String
  email         String?
  avatarId      Int?      @default(0)
  isBlacklisted Boolean   @default(false)
  acceptedRules Boolean   @default(false)
  acceptedTerms Boolean   @default(false)
  role          Role      @default(USER)
  comments      Comment[]
  posts         Post[]
  journals       Journal[]
}

model Post {
  id          String    @id @unique @default(uuid())
  text        String
  at          DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String?
  isPublished Boolean   @default(true)
  User        User?     @relation(fields: [userId], references: [id])
  Comment     Comment[]
}

model Comment {
  id      String    @id @unique @default(uuid())
  text    String
  at      DateTime? @default(now())
  postsId String
  userId  String
  post    Post      @relation(fields: [postsId], references: [id])
  author  User      @relation(fields: [userId], references: [id])
}

model Journal {
  id        String    @id @unique @default(uuid())
  title     String
  entries   Entry[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  isPublic  Boolean   @default(false)
}

model Entry {
  id        String    @id @unique @default(uuid())
  text      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  journalId String
  journal   Journal   @relation(fields: [journalId], references: [id])
}

enum Role {
  ADMIN
  MODERATOR
  USER
}
